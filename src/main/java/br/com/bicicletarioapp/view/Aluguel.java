package br.com.bicicletarioapp.view;


import br.com.bicicletarioapp.model.Cliente;
import br.com.bicicletarioapp.model.Bicicleta;
import br.com.bicicletarioapp.repository.AluguelRepository;
import br.com.bicicletarioapp.repository.BicicletaRepository;
import br.com.bicicletarioapp.repository.ClienteRepository;
import br.com.bicicletarioapp.repository.IAluguelRepository;
import br.com.bicicletarioapp.repository.IBicicletaRepository;
import br.com.bicicletarioapp.repository.IClienteRepository;
import br.com.bicicletarioapp.service.AluguelService;
import br.com.bicicletarioapp.service.ClienteService;
import br.com.bicicletarioapp.service.BicicletaService;
import br.com.bicicletarioapp.util.JPAUtil;
import jakarta.persistence.EntityManager;
import javax.swing.JOptionPane;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.format.DateTimeParseException;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.table.DefaultTableModel;

public class Aluguel extends javax.swing.JFrame {

    private javax.swing.JTextField txtClienteId;
    private javax.swing.JTextField txtBicicletaId;
    private javax.swing.JTextField txtPrecoHora;

    /**
     * Creates new form Aluguel
     */
    public Aluguel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnVoltar = new javax.swing.JButton();
        btnAdicionar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnCalcular = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(600, 400));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("GERENCIAR ALUGUÉIS");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, 280, -1));

        btnVoltar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnVoltar.setText("VOLTAR");
        btnVoltar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });
        getContentPane().add(btnVoltar, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 20, 80, 32));

        btnAdicionar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnAdicionar.setText("ADICIONAR");
        btnAdicionar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });
        getContentPane().add(btnAdicionar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 120, -1));

        btnExcluir.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnExcluir.setText("EXCLUIR");
        btnExcluir.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(btnExcluir, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 320, 100, -1));

        btnCalcular.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnCalcular.setText("CALCULAR");
        btnCalcular.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });
        getContentPane().add(btnCalcular, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 320, 120, -1));

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "id", "cliente_id", "bicicleta_id ", "hora_inicio ", "hora_termino ", "preço_hora "
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 70, 550, 240));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        new MenuPrincipal().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        EntityManager em = null;
        try {
            em = JPAUtil.getEntityManager();

            // Instancia os repositórios e serviços corretamente
            IAluguelRepository aluguelRepository = new AluguelRepository(em);
            AluguelService aluguelService = new AluguelService(em);
            IClienteRepository clienteRepository = new ClienteRepository(em);
            ClienteService clienteService = new ClienteService(clienteRepository);

            IBicicletaRepository bicicletaRepository = new BicicletaRepository(em) {
                @Override
                public Bicicleta findByNumero(String numero) {
                    return null;
                }
            };
            BicicletaService bicicletaService = new BicicletaService(bicicletaRepository);
            int selectedRow = jTable1.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Selecione uma linha na tabela.", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Coleta e valida os dados da JTable
            Object clienteIdObj = jTable1.getValueAt(selectedRow, 1);
            Object bicicletaIdObj = jTable1.getValueAt(selectedRow, 2);
            Object horaInicioObj = jTable1.getValueAt(selectedRow, 3);
            Object horaTerminoObj = jTable1.getValueAt(selectedRow, 4);
            Object precoHoraObj = jTable1.getValueAt(selectedRow, 5);

            if (clienteIdObj == null || bicicletaIdObj == null || horaInicioObj == null || horaTerminoObj == null || precoHoraObj == null) {
                JOptionPane.showMessageDialog(this, "Todos os campos devem ser preenchidos.", "Erro de Validação", JOptionPane.ERROR_MESSAGE);
                return;
            }

            Long clienteId = Long.valueOf(clienteIdObj.toString());
            Long bicicletaId = Long.valueOf(bicicletaIdObj.toString());
            String horaInicioStr = horaInicioObj.toString();
            String horaTerminoStr = horaTerminoObj.toString();
            Double precoHora = Double.valueOf(precoHoraObj.toString());

            em.getTransaction().begin();

            Cliente cliente = clienteService.buscarClientePorId(clienteId);
            if (cliente == null) {
                JOptionPane.showMessageDialog(this, "Cliente com ID " + clienteId + " não encontrado.", "Erro", JOptionPane.ERROR_MESSAGE);
                em.getTransaction().rollback();
                return;
            }

            Bicicleta bicicleta = bicicletaService.buscarPorId(bicicletaId.longValue());
            if (bicicleta == null) {
                JOptionPane.showMessageDialog(this, "Bicicleta com ID " + bicicletaId + " não encontrada.", "Erro", JOptionPane.ERROR_MESSAGE);
                em.getTransaction().rollback();
                return;
            }

            br.com.bicicletarioapp.model.Aluguel novoAluguel = new br.com.bicicletarioapp.model.Aluguel();
            novoAluguel.setCliente(cliente);
            novoAluguel.setBicicleta(bicicleta);
            novoAluguel.setPrecoHora(BigDecimal.valueOf(precoHora));

            // Formata e converte as datas
            try {
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                novoAluguel.setHoraInicio(LocalDateTime.parse(horaInicioStr, formatter));
                novoAluguel.setHoraTermino(LocalDateTime.parse(horaTerminoStr, formatter));
            } catch (DateTimeParseException e) {
                JOptionPane.showMessageDialog(this, "Formato de data/hora inválido. Use 'yyyy-MM-dd HH:mm:ss'.", "Erro de Formato", JOptionPane.ERROR_MESSAGE);
                em.getTransaction().rollback();
                return;
            }

            aluguelService.registrarAluguel(novoAluguel);

            em.getTransaction().commit();

            JOptionPane.showMessageDialog(this, "Aluguel adicionado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);

            carregarAlugueis();
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); // Remove todas as linhas

// Adicione apenas linhas VAZIAS para novos cadastros
            for (int i = 0; i < 10; i++) {
                model.addRow(new Object[]{null, null, null, null, null, null});
            }// Atualiza a tabela

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Erro de formato numérico: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            if (em != null && em.getTransaction().isActive()) {
                em.getTransaction().rollback();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ocorreu um erro ao adicionar o aluguel: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            if (em != null && em.getTransaction().isActive()) {
                em.getTransaction().rollback();
            }
            e.printStackTrace();
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed
        CalculoAluguel telaCalculo = new CalculoAluguel();
        telaCalculo.setVisible(true);

        this.dispose();
    }//GEN-LAST:event_btnCalcularActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Aluguel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Aluguel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Aluguel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Aluguel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Aluguel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnCalcular;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void carregarAlugueis() {
        EntityManager em = null;
        try {
            em = JPAUtil.getEntityManager();

            IAluguelRepository aluguelRepository = new AluguelRepository(em);

            AluguelService aluguelService = new AluguelService((EntityManager) aluguelRepository);
            // ---------------------------------

            List<br.com.bicicletarioapp.model.Aluguel> alugueis = aluguelService.listarAlugueis();

            // Limpa a tabela
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            // Define um formatador para a data e hora
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

            // Preenche a tabela
            for (br.com.bicicletarioapp.model.Aluguel aluguel : alugueis) {
                model.addRow(new Object[]{
                    aluguel.getId(),
                    aluguel.getCliente().getId(),
                    aluguel.getBicicleta().getId(),
                    aluguel.getHoraInicio().format(formatter), // Formata a data para exibição
                    aluguel.getHoraTermino().format(formatter), // Formata a data para exibição
                    aluguel.getPrecoHora()
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar aluguéis: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

}
